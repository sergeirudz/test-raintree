"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAppSyncAPI = void 0;
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const path = require("path");
const schemaPath = path.join(__dirname, '../../../../packages/graphql/schema.graphql');
const resolverPath = path.join(__dirname, '../../../../packages/appsync-resolvers/build');
const createAppSyncAPI = (scope, props) => {
    // Configure authorization - support both API Key and IAM (for Cognito)
    const authorizationConfig = {
        defaultAuthorization: {
            authorizationType: aws_appsync_1.AuthorizationType.API_KEY,
        },
        additionalAuthorizationModes: props.cognitoAuth
            ? [
                {
                    authorizationType: aws_appsync_1.AuthorizationType.IAM,
                },
            ]
            : undefined,
    };
    const api = new aws_appsync_1.GraphqlApi(scope, props.apiName, {
        name: props.apiName,
        definition: aws_appsync_1.Definition.fromFile(schemaPath),
        authorizationConfig,
        logConfig: {
            fieldLogLevel: aws_appsync_1.FieldLogLevel.ALL,
        },
        xrayEnabled: true,
    });
    // Grant Cognito users access to the AppSync API if provided
    if (props.cognitoAuth) {
        props.cognitoAuth.grantAppSyncAccess(api.arn);
    }
    const appDataSource = api.addDynamoDbDataSource('AppDataDS', props.dataTable);
    const validateWeightLambda = new aws_lambda_1.Function(scope, 'ValidateWeightFunction', {
        runtime: aws_lambda_1.Runtime.NODEJS_18_X,
        handler: 'validateWeight.handler',
        code: aws_lambda_1.Code.fromAsset(path.join(__dirname, '../functions')),
        timeout: aws_cdk_lib_1.Duration.seconds(30),
        memorySize: 256,
    });
    const lambdaDataSource = api.addLambdaDataSource('ValidateWeightDataSource', validateWeightLambda);
    const validateWeightFunction = new aws_appsync_1.AppsyncFunction(scope, 'ValidateWeightAppsyncFunction', {
        name: 'validateWeightFunction',
        api,
        dataSource: lambdaDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'pipeline/validateWeight.js')),
    });
    const createWeightFunction = new aws_appsync_1.AppsyncFunction(scope, 'CreateWeightAppsyncFunction', {
        name: 'createWeightFunction',
        api,
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'mutations/createWeight.js')),
    });
    const updateWeightFunction = new aws_appsync_1.AppsyncFunction(scope, 'UpdateWeightAppsyncFunction', {
        name: 'updateWeightFunction',
        api,
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'mutations/updateWeight.js')),
    });
    api.createResolver('getUserResolver', {
        typeName: 'Query',
        fieldName: 'getUser',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'queries/getUser.js')),
    });
    api.createResolver('listUsersResolver', {
        typeName: 'Query',
        fieldName: 'listUsers',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'queries/listUsers.js')),
    });
    api.createResolver('listWeightsByUserResolver', {
        typeName: 'Query',
        fieldName: 'listWeightsByUser',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'queries/listWeightsByUser.js')),
    });
    api.createResolver('createUserResolver', {
        typeName: 'Mutation',
        fieldName: 'createUser',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'mutations/createUser.js')),
    });
    api.createResolver('updateUserResolver', {
        typeName: 'Mutation',
        fieldName: 'updateUser',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'mutations/updateUser.js')),
    });
    api.createResolver('deleteUserResolver', {
        typeName: 'Mutation',
        fieldName: 'deleteUser',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'mutations/deleteUser.js')),
    });
    api.createResolver('createWeightResolver', {
        typeName: 'Mutation',
        fieldName: 'createWeight',
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        pipelineConfig: [validateWeightFunction, createWeightFunction],
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'pipeline/createWeightPipeline.js')),
    });
    api.createResolver('updateWeightResolver', {
        typeName: 'Mutation',
        fieldName: 'updateWeight',
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        pipelineConfig: [validateWeightFunction, updateWeightFunction],
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'pipeline/updateWeightPipeline.js')),
    });
    api.createResolver('deleteWeightResolver', {
        typeName: 'Mutation',
        fieldName: 'deleteWeight',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'mutations/deleteWeight.js')),
    });
    api.createResolver('userWeightsFieldResolver', {
        typeName: 'User',
        fieldName: 'weights',
        dataSource: appDataSource,
        runtime: aws_appsync_1.FunctionRuntime.JS_1_0_0,
        code: aws_appsync_1.Code.fromAsset(path.join(resolverPath, 'fieldResolvers/User.weights.js')),
    });
    return api;
};
exports.createAppSyncAPI = createAppSyncAPI;
//# sourceMappingURL=data:application/json;base64,